---
- name: include os-specific vars
  include_vars: "{{ansible_os_family}}.yml"

- name: test variables
  debug:
    msg: "apache_fqdn: {{ apache_fqdn }}"

- name: install apache packages
  package: name={{ item }} state=present
  become: true
  with_items:
    - "{{ apache_service }}"

- name: install packages to support https
  package: name={{ item }} state=present
  become: true
  with_items:
    - mod_ssl
    - openssl
  when: apache_https

  # begin self-signed block
- block:
  - name: create self-signed SSL cert
    command: >
      openssl req -new -nodes -x509
      -subj "{{ ssl_certificate_subj }}"
      -days 365
      -newkey rsa:4096
      -keyout "{{ ssl_certificate_key_path }}/{{ ssl_certificate_key_file }}"
      -out "{{ ssl_certificate_path}}/{{ ssl_certificate_file }}"
      creates="{{ ssl_certificate_path}}/{{ ssl_certificate_file }}"
    register: key

  - name: generate DH parameters for perfect forward secrecy
    command: >
      openssl dhparam
      -out "{{ ssl_certificate_path}}/dhparam.pem"
      2048
      creates="{{ ssl_certificate_path}}/dhparam.pem"
    register: params

  - wait_for:
      path: "{{ ssl_certificate_path}}/dhparam.pem"

  - name: load parameters into a variable, to use in the next task
    shell: "cat {{ ssl_certificate_path}}/dhparam.pem"
    register: param_contents
    when: key.changed or params.changed

    # NOTE: going to the trouble to remove header and footer, so we can use them as markers for the block
  - name: append parameters to the certificate
    blockinfile:
      block: "{{ param_contents.stdout | replace('-----BEGIN DH PARAMETERS-----\n', '') | replace('\n-----END DH PARAMETERS-----', '') }}"
      dest: "{{ ssl_certificate_path}}/{{ ssl_certificate_file }}"
      marker: "-----{mark} DH PARAMETERS-----"
    when: key.changed or params.changed

  # end self-signed block
  become: true
  when: "{{ ssl_self_sign_cert }}"

- name: remove welcome (test) page
  file:
    dest: "/etc/{{ apache_service }}/conf.d/welcome.conf"
    state: absent
  notify: restart apache
  when: apache_remove_welcome

- name: configure apache
  template:
    src: "templates/{{ apache_service }}.conf.j2"
    dest: "/etc/{{ apache_service }}/conf.d/{{ apache_hostname }}.conf"
  become: true
  notify: restart apache

- name: check if apache service is running
  service:
    name: "{{ apache_service }}"
    state: started
  become: true
  register: apache_status
